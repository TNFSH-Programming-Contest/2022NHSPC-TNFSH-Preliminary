name: Build tests

on:
  push:
    branches:
      - '**'
    paths:
      - '*/gen/**'
      - '*/solution/**'
      - '*/problem.json'
      - '*/solutions.json'
      - '*/subtasks.json'
  workflow_dispatch:
    inputs:
      input:
        description: 'Problem labels to build inputs'
        default: ''
      output:
        description: 'Problem labels to build outputs'
        default: ''
      solutions:
        description: 'Problem labels to run solutions'
        default: ''

jobs:
  problem-list:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      matrix: ${{ steps.problem-list.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Read problems
        id: problem-list
        run: |
          problems=$(cat .problems.json)
          echo "::set-output name=matrix::$problems"

  check-push:
    needs: [problem-list]
    if: ${{ github.event_name == 'push' && github.repository != 'TNFSH-Programming-Contest/tps-starter' }}
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        problem: ${{ fromJson(needs.problem-list.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Make flags dir
        run: |
          mkdir -p /home/runner/flags/build-tests/
          touch /home/runner/flags/build-tests/.keep
          mkdir -p /home/runner/flags/build-input/
          touch /home/runner/flags/build-input/.keep
          mkdir -p /home/runner/flags/build-output/
          touch /home/runner/flags/build-output/.keep
          mkdir -p /home/runner/flags/run-solutions/
          touch /home/runner/flags/run-solutions/.keep

      - name: Set env
        id: env
        working-directory: p${{ matrix.problem }}
        run: |
          export model_solution=$(SOLUTIONS_JSON=./solutions.json python3 scripts/internal/get_model_solution.py)
          echo "::set-output name=model_solution::$model_solution"

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: 'json'
          filters: |
            input:
              - p${{ matrix.problem }}/gen/**
            output:
              - p${{ matrix.problem }}/solution/${{ steps.env.outputs.model_solution }}
            solutions:
              - p${{ matrix.problem }}/solution/**
              - p${{ matrix.problem }}/solutions.json

      - name: Show changed files
        env:
          FILES: ${{ toJson(steps.changes.outputs) }}
        run: |
          echo "$FILES"

      - name: Set input flag
        if: steps.changes.outputs.input == 'true'
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/build-input/${{ matrix.problem }}

      - name: Set output flag
        if: steps.changes.outputs.output == 'true'
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/build-output/${{ matrix.problem }}

      - name: Set solutions flag
        if: steps.changes.outputs.solutions == 'true'
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/run-solutions/${{ matrix.problem }}

      - name: Check changes in config
        run: |
          set +e

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/problem.json | grep '"time_limit"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
            echo true > /home/runner/flags/run-solutions/${{ matrix.problem }}
          else
            echo "No changes in problem.json for solutions";
          fi

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/solutions.json | grep '"model_solution"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
            echo true > /home/runner/flags/build-input/${{ matrix.problem }}
          else
            echo "No changes in solutions.json for input";
          fi

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/subtasks.json | grep '"score"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
            echo true > /home/runner/flags/run-solutions/${{ matrix.problem }}
          else
            echo "No changes in subtasks.json for solutions";
          fi

      - name: Remove flags if auto build disabled
        if: hashFiles(format('p{0}/gen/DISABLE_AUTO_BUILD', matrix.problem)) != ''
        run: |
          rm -f /home/runner/flags/build-tests/${{ matrix.problem }}
          rm -f /home/runner/flags/build-input/${{ matrix.problem }}
          rm -f /home/runner/flags/build-output/${{ matrix.problem }}
          rm -f /home/runner/flags/run-solutions/${{ matrix.problem }}

      - name: Upload flags
        uses: actions/upload-artifact@v2
        with:
          name: flags
          path: /home/runner/flags/

  check-manually:
    needs: [problem-list]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        problem: ${{ fromJson(needs.problem-list.outputs.matrix) }}

    steps:
      - name: Make flags dir
        run: |
          mkdir -p /home/runner/flags/build-tests/
          touch /home/runner/flags/build-tests/.keep
          mkdir -p /home/runner/flags/build-input/
          touch /home/runner/flags/build-input/.keep
          mkdir -p /home/runner/flags/build-output/
          touch /home/runner/flags/build-output/.keep
          mkdir -p /home/runner/flags/run-solutions/
          touch /home/runner/flags/run-solutions/.keep

      - name: Set input flag
        if: contains(github.event.inputs.input, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/build-input/${{ matrix.problem }}

      - name: Set output flag
        if: contains(github.event.inputs.output, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/build-output/${{ matrix.problem }}

      - name: Set solutions flag
        if: contains(github.event.inputs.solutions, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/run-solutions/${{ matrix.problem }}

      - name: Upload flags
        uses: actions/upload-artifact@v2
        with:
          name: flags
          path: /home/runner/flags/

  check-post:
    needs: [check-push, check-manually]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      build-tests: ${{ steps.build-tests.outputs.build-tests }}
      build-input: ${{ steps.build-input.outputs.build-input }}
      build-output: ${{ steps.build-output.outputs.build-output }}
      run-solutions: ${{ steps.run-solutions.outputs.run-solutions }}

    steps:
      - name: Download flags
        uses: actions/download-artifact@v2
        with:
          name: flags
          path: /home/runner/flags/

      - name: build-tests
        id: build-tests
        working-directory: /home/runner/flags/build-tests/
        run: |
          probs=$(python3 -c 'import json, glob; print(json.dumps(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-tests::$probs"

      - name: build-input
        id: build-input
        working-directory: /home/runner/flags/build-input/
        run: |
          probs=$(python3 -c 'import glob; print("".join(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-input::$probs"

      - name: build-output
        id: build-output
        working-directory: /home/runner/flags/build-output/
        run: |
          probs=$(python3 -c 'import glob; print("".join(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-output::$probs"

      - name: run-solutions
        id: run-solutions
        working-directory: /home/runner/flags/run-solutions/
        run: |
          probs=$(python3 -c 'import glob; print("".join(glob.glob("*")))')
          echo $probs
          echo "::set-output name=run-solutions::$probs"

  build-tests:
    needs: check-post
    if: always() && needs.check-post.outputs.build-tests != '[]'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        problem: ${{ fromJson(needs.check-post.outputs.build-tests) }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Install dependencies
        run: |
          sudo apt-get install dos2unix python3-setuptools
          sudo python3 -m pip install psutil

      - name: Install tps
        run: |
          git clone https://github.com/ioi-2017/tps.git
          cd tps && sudo ./install-tps.sh

      - name: env
        env:
          NEEDS: ${{ toJson(needs) }}
          ENVS: ${{ toJson(env) }}
        run: |
          echo "$NEEDS"
          echo "$ENVS"

      - name: Build inputs and outputs
        if: contains(needs.check-post.outputs.build-input, matrix.problem)
        working-directory: p${{ matrix.problem }}
        run: |
          echo "Building input for ${{ matrix.problem }}"
          tps gen -s
          git status
          git add gen/data
          git add tests/*.in
          git add tests/*.out
          git add tests/gen_summary
          git add tests/mapping
          git pull
          git diff --cached --quiet || git commit -m "p${{ matrix.problem }} Build inputs and outputs

          Co-Authored-By: ${{ github.event.sender.login }} <${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com>"
          git push

      - name: Build outputs
        if: ${{ !contains(needs.check-post.outputs.build-input, matrix.problem) && contains(needs.check-post.outputs.build-output, matrix.problem) }}
        working-directory: p${{ matrix.problem }}
        run: |
          echo "Building output for ${{ matrix.problem }}"
          tps gen -s --no-gen
          git status
          git add tests/*.out
          git pull
          git diff --cached --quiet || git commit -m "p${{ matrix.problem }} Build outputs

          Co-Authored-By: ${{ github.event.sender.login }} <${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com>"
          git push

      - name: Check tests changes
        id: tests-changes
        run: |
          set +e

          git diff ${{ github.sha }}..HEAD --quiet p${{ matrix.problem }}/tests/*.in p${{ matrix.problem }}/tests/*.out
          if [ $? -ne 0 ]; then
            echo "::set-output name=changed::true"
            echo "Tests changed"
          else
            echo "No changes in tests";
          fi

      - name: Run solutions
        if: contains(needs.check-post.outputs.run-solutions, matrix.problem) || steps.tests-changes.outputs.changed == 'true'
        working-directory: p${{ matrix.problem }}
        run: |
          echo "Run solutions for ${{ matrix.problem }}"
          rm -f solutions-check.txt
          tps solutions | tee -a solutions-check.txt
          git status
          git add solutions-check.txt
          git pull
          git diff --cached --quiet || git commit -m "p${{ matrix.problem }} Run solutions"
          git push
